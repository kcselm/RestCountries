{"version":3,"sources":["components/Error.js","components/Country.js","components/Countries.js","components/Summary.js","components/Search.js","context.js","App.js","serviceWorker.js","index.js"],"names":["Error","className","this","props","message","Component","Country","country","name","alpha2Code","alpha3Code","src","flag","alt","region","subregion","Intl","NumberFormat","format","population","languages","map","language","i","key","Countries","countriesList","numericCode","Summary","uniqueRegions","regions","filter","v","a","indexOf","uniqueSubregions","subregions","total","Search","state","searchTerm","totalCountries","error","onChange","e","setState","target","value","submitRequest","fetch","response","status","statusText","console","log","json","data","length","Fragment","type","placeholder","onClick","Context","React","createContext","Provider","counties","children","Consumer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.67bd13bd.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\n class Error extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2 className=\"text-danger\">{this.props.message}</h2>\r\n      </div>\r\n    )\r\n }\r\n}\r\n\r\nexport default Error","import React from 'react'\r\n\r\n const Country = props => {\r\n  const { country } = props\r\n  return (\r\n    <div>\r\n      <div className=\"card border-primary mb-3\">\r\n        <h4 className=\"card-header \">{country.name}</h4>\r\n        <div className=\"card-body\">\r\n          <h6 className=\"card-text\">Alpha Code 2: {country.alpha2Code}</h6>\r\n          <h6 className=\"card-text\">Alpha Code 3: {country.alpha3Code}</h6>\r\n          <img src={country.flag} className=\"img-fluid img-thumbnail mb-2\" alt={`${country.name}'s flag image'`}/>\r\n          <h6 className=\"card-text\">Region: {country.region}</h6>\r\n          <h6 className=\"card-text\">Subregion: {country.subregion}</h6>\r\n          <h6 className=\"card-text\">Population: {new Intl.NumberFormat().format(country.population)}</h6>\r\n          <h6 className=\"card-text list-inline\">Languages: {country.languages.map((language, i) => (\r\n            <li key={i} className=\"list-inline-item\">{language.name} </li>\r\n          ))}\r\n          </h6>\r\n\r\n        </div>\r\n      </div>\r\n    </div> \r\n  )\r\n}\r\n\r\nexport default Country","import React, { Component } from 'react'\r\n// import { Consumer } from '../context'\r\n// import Search from './Search'\r\nimport Country from './Country'\r\n\r\nclass Countries extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.countriesList.map(country => (\r\n          <Country \r\n          key={country.numericCode} \r\n          country={country}/>\r\n        ))}\r\n      </div>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default Countries","import React from 'react'\r\n\r\n\r\nconst Summary = props => {\r\n  let uniqueRegions = props.regions.filter((v, i , a) => a.indexOf(v) ===i)\r\n  let uniqueSubregions = props.subregions.filter((v, i , a) => a.indexOf(v) ===i)\r\n\r\n  return (\r\n    <div className=\"card border-primary mb-3\">\r\n      <h4 className=\"card-header \">Summary</h4>\r\n      <div className=\"card-body\">\r\n        <div className=\"card-text list-inline font-weight-bold\">\r\n          Total Countries: <span className=\"font-weight-normal\">{props.total}</span>\r\n        </div>\r\n        <div className=\"card-text list-inline font-weight-bold\">Total Regions: {uniqueRegions.map((region, i) => (\r\n          <li key={i} className=\"list-inline-item font-weight-normal\">{region}</li>\r\n        ))}</div>\r\n        <div className=\"card-text list-inline font-weight-bold\">\r\n          Total Subregions: {uniqueSubregions.map((subregion, i) => (\r\n          <li key={i} className=\"list-inline-item font-weight-normal\">{subregion}</li>\r\n        ))}</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Summary\r\n","import React, { Component } from 'react'\r\n\r\nimport Error from './Error'\r\nimport Countries from './Countries'\r\nimport Summary from './Summary'\r\n\r\n// const Search = () => {\r\nclass Search extends Component {\r\n  state = {\r\n    searchTerm: \"\",\r\n    countriesList: [],\r\n    totalCountries: 0,\r\n    regions: [],\r\n    subregions: [], \r\n    error: \"\"\r\n  }\r\n\r\n  onChange = e => {\r\n    this.setState({ \r\n      [e.target.name]: e.target.value,\r\n      totalCountries: 0,\r\n      regions: [],\r\n      subregions: []\r\n    })  \r\n  }\r\n\r\n  submitRequest = async () => {\r\n    try {\r\n      const response = await fetch(`https://restcountries.eu/rest/v2/name/${this.state.searchTerm}`)\r\n      if (response.status === 404) {\r\n        this.setState({error: \"Invalid Search\"})\r\n        throw Error(response.statusText),\r\n        console.log(response.statusText)\r\n      } else {\r\n        this.setState({error: \"\"})\r\n      }\r\n      const data = await response.json()\r\n      this.setState({\r\n        countriesList: data,\r\n        totalCountries: data.length,\r\n        regions: data.map(region => region.region),\r\n        subregions: data.map(subregion => subregion.subregion)\r\n      })\r\n    } catch (error) {\r\n      console.log(error)\r\n    }  \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"form-inline my-2 my-lg-0\">\r\n          <div className=\"mb-4\">\r\n            <input \r\n            className=\"form-control mr-sm-2\" \r\n            type=\"text\" \r\n            placeholder=\"\" \r\n            name=\"searchTerm\" \r\n            value={this.state.searchTerm}\r\n            onChange={this.onChange}/>\r\n            <button \r\n            className=\"btn btn-secondary my-2 my-sm-0\" \r\n            type=\"submit\"\r\n            onClick={this.submitRequest}\r\n            >Search</button>\r\n          </div>\r\n        </div>\r\n        {/* <React.Fragment /> */}\r\n        <Error message={this.state.error}/>\r\n        <Countries countriesList={this.state.countriesList}/>\r\n        <Summary \r\n        total={this.state.totalCountries}\r\n        regions={this.state.regions}\r\n        subregions={this.state.subregions}\r\n        />\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Search","import React, { Component } from 'react'\r\n\r\nconst Context = React.createContext()\r\n\r\nexport class Provider extends Component {\r\n  state = {\r\n    counties: [\"USA\", \"Canada\"],\r\n    searchTerm:  \"\"\r\n  }\r\n\r\n  // getSearchTerm = () => {\r\n  //   this.setState({})\r\n  // }\r\n\r\n  // async componentDidMount() {\r\n  //   try {\r\n  //     const response = await fetch(`https://restcountries.eu/rest/v2/name/united`)\r\n  //     if (!response.ok) {\r\n  //       throw Error(response.statusText)\r\n  //     }\r\n  //     const data = await response.json()\r\n  //     console.log(data)\r\n  //   } catch (error) {\r\n  //     console.log(error)\r\n  //   }  \r\n  // }\r\n\r\n  render() {\r\n    return (\r\n      <Context.Provider value={this.state}>\r\n        { this.props.children }\r\n      </Context.Provider>\r\n      )\r\n  }\r\n}\r\n\r\nexport const Consumer = Context.Consumer","import React from 'react';\r\nimport './App.css';\r\nimport Search from './components/Search'\r\n// import Countries from './components/Countries'  \r\nimport { Provider } from './context'\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider>\r\n      <div className=\"container\">\r\n        <h1>Rest Countries</h1>\r\n        <Search />\r\n        {/* <Countries /> */}\r\n      </div>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}